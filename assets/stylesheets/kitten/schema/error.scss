/// Build an error message prefixed by a module or mixin name.
///
/// @group 0200_schema
///
/// @parameter {String} $module  - module name
/// @parameter {String} $message - error message
///
/// @return {String}
///
/// @example scss - Usage
///   k_module-error('module', 'something went wrong');
///   // Will return '[module]: something went wrong'
@function k_module-error($module, $message) {
  @return "[#{$module}]: #{$message}";
}

/// Raise an error message for a specific module and path.
///
/// @group 0200_schema
///
/// @parameter {String} $module  - module name
/// @parameter {String} $path    - path to invalid attribute
/// @parameter {String} $message - error message
///
/// @example scss - Usage
///   k_schema-error('module', 'margin.top', 'is not a number');
///   // Will throw '[module]: margin.top is not a number'
@function k_schema-error($module, $path, $message) {
  @error k_module-error(
    $module,
    "#{$path} #{$message}"
  );
}

/// Raise a invalid unit error for a specific module and path.
///
/// @group 0200_schema
///
/// @parameter {String} $module    - module name
/// @parameter {String} $path      - path to invalid attribute
/// @parameter {String|List} $unit - expected unit
///
/// @example scss - Usage
///   k_unit-error('module', 'margin.top', (px, rem));
///   // Will throw '[module]: margin.top should be one of px, rem'
@function k_unit-error($module, $path, $unit) {
  @if type-of($unit) == 'string' {
    @if $unit == none {
      @return k_schema-error(
        $module, $path,
        'should be a unitless number'
      );
    }
    @else {
      @return k_schema-error(
        $module, $path,
        "should be defined in #{$unit}"
      );
    }
  }
  @elseif type-of($unit) == 'list' {
    @return k_schema-error(
      $module, $path,
      "should be one of #{$unit}"
    );
  }
}
