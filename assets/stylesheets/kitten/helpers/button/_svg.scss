/// Apply button basic display.
///
/// This mixin will apply pseudo-classes and state classes on the parent class
/// that is calling it:
///   - `:hover`
///   - `:focus`
///   - `:active`
///   - `:disabled` (optionnal)
///   - `.is-selected` (optionnal)
///
/// The `:focus` pseudo-class is optionnal. If it is not defined, the `:hover`
/// styles will be applied to `:focus` pseudo-class.
///
/// When `border-color` is not defined, `transparent` is used by default.
///
/// @group buttons
///
/// @parameter {Map} $button - a button specification
///
/// @example scss - Usage
///   $button: (
///     colors: (
///       base-color: color: #fff,
///       focus-color: color: #fff,
///       hover-color: color: #fff,
///       active-color: color: #fff,
///       disabled-color: color: #fff,
///       is-selected-color: color: #fff,
///     )
///   )
///

@mixin k-buttonSvg($button, $parent, $stroke_class) {

  $base-color: k-color-definition(
    k-map-fetch($button, ('colors', 'base', 'color')));
  $hover-color: k-color-definition(
    k-map-fetch($button, ('colors', 'hover', 'color')));
  $focus-color: k-color-definition(
    k-map-fetch($button, ('colors', 'focus', 'color')));
  $active-color: k-color-definition(
    k-map-fetch($button, ('colors', 'active', 'color')));
  $disabled-color: k-color-definition(
    k-map-fetch($button, ('colors', 'disabled', 'color')));

  fill: $base-color;

  .#{$parent}:hover & {
    fill: $hover-color;
  }

  .#{$parent}:focus & {
    @if $focus-color {
      fill: $focus-color;
    }
    @else {
      fill: $hover-color;
    }
  }

  .#{$parent}:active & {
    fill: $active-color;
  }

  .#{$parent}:disabled & {
    fill: $disabled-color;
  }

  .#{$stroke_class} {
    stroke: $base-color;

    .#{$parent}:hover & {
      stroke: $hover-color;
    }

    .#{$parent}:focus & {
      @if $focus-color {
        stroke: $focus-color;
      }
      @else {
        stroke: $hover-color;
      }
    }

    .#{$parent}:active & {
      stroke: $active-color;
    }

    .#{$parent}:disabled & {
      stroke: $disabled-color;
    }
  }
}
