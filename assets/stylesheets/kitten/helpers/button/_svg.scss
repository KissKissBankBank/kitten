/// Set a svg on a button.
///
/// Given a svg color, this mixin will use the passed color to set the
/// `svg` CSS rule.
///
/// @group buttons
///
/// @parameter {Color} $button, $parent, $stroke_class
///
/// @example scss - Usage
///   @include k-buttonSvg(#d8d8d8);
///
/// @example css - CSS output
///    fill: #fff;
///    .k-Button,
///    .k-Button__svg__stroke:hover {
///      fill: #3b5998;
///    }
///   ...

@mixin k-buttonSvg($button, $parent, $stroke_class) {

  $base-color: k-color-definition(
    k-map-fetch($button, ('colors', 'base', 'color')));
  $hover-color: k-color-definition(
    k-map-fetch($button, ('colors', 'hover', 'color')));
  $active-color: k-color-definition(
    k-map-fetch($button, ('colors', 'active', 'color')));
  $disabled-color: k-color-definition(
    k-map-fetch($button, ('colors', 'disabled', 'color')));
  $is-selected-color: k-color-definition(
    k-map-fetch($button, ('colors', 'is-selected', 'color')));

  .#{$parent} & {
    fill: $base-color;
  }

  .#{$parent}:hover & {
    fill: $hover-color;
  }

  .#{$parent}:active & {
    fill: $active-color;
  }

  .#{$parent}:disabled & {
    fill: $disabled-color;
  }

  .#{$parent}.is-selected & {
    fill: $is-selected-color;
  }

  .#{$stroke_class} {

    .#{$parent} & {
      stroke: $base-color;
    }

    .#{$parent}:hover & {
      stroke: $hover-color;
    }

    .#{$parent}:active & {
      stroke: $active-color;
    }

    .#{$parent}:disabled & {
      stroke: $disabled-color;
    }

    .#{$parent}.is-selected & {
      stroke: $is-selected-color;
    }
  }
}
